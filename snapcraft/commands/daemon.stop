#!/bin/sh
set -eu

# Re-exec outside of apparmor confinement
if [ -d /sys/kernel/security/apparmor ] && [ "$(cat /proc/self/attr/current)" != "unconfined" ]; then
    exec aa-exec -p unconfined -- "$0" "$@"
fi

export LXD_DIR="${SNAP_COMMON}/lxd/"

# FIXME: Detect stop reason
#        This should be exposed by snapd directly
STATUS=$(snap-query /run/snapd.socket lxd 2>/dev/null || true)

reason="host shutdown"
if [ -s "${SNAP_COMMON}/state" ]; then
    reason="$(cat "${SNAP_COMMON}/state")"
elif [ "${STATUS}" = "auto-refresh" ]; then
    reason="snap refresh"
elif [ "${STATUS}" = "refresh-snap" ]; then
    reason="snap refresh"
elif [ "${STATUS}" = "install-snap" ]; then
    reason="snap refresh"
elif [ "${STATUS}" = "remove-snap" ]; then
    reason="snap removal"
fi

echo "=> Stop reason is: ${reason}"

# Handle lxd shutdown
if [ "${reason}" = "shutdown" ]; then
    exit 0
fi

# Handle reloads and crashes
if [ "${reason}" = "reload" ] || [ "${reason}" = "crashed" ]; then
    exit 0
fi

# Handle refreshes
if [ "${reason}" = "snap refresh" ]; then
    echo "=> Stopping LXD"
    if [ -e "${SNAP_COMMON}/lxd.pid" ]; then
        PID=$(cat "${SNAP_COMMON}/lxd.pid")
        /bin/kill "$PID"
        COUNT=0
        while [ "$COUNT" != "30" ]; do
            sleep 1
            COUNT=$((COUNT+1))
            ps "$PID" >/dev/null 2>&1 || break
        done
        ps "$PID" >/dev/null 2>&1 && /bin/kill -9 "$PID"
    fi

    exit 0
fi

# Handle removal
if [ "${reason}" = "snap removal" ]; then
    # FIXME: Cleanup our bash completion workaround
    #        This should be handled by snapd directly (LP: #1590767)
    if [ -e /var/lib/snapd/hostfs/etc/bash_completion.d/lxc ] && \
            readlink -f /var/lib/snapd/hostfs/etc/bash_completion.d/lxc | grep -q /snap/lxd; then
        echo "==> Removing bash completion hook"
        rm -f /var/lib/snapd/hostfs/etc/bash_completion.d/lxc
    fi
fi

# Shutdown the daemons
## LXD
echo "=> Stopping LXD (with container shutdown)"

echo host-shutdown > "${SNAP_COMMON}/state"
PID=$(cat "${SNAP_COMMON}/lxd.pid" || true)
if [ -n "${PID}" ] && kill -0 "${PID}" 2>/dev/null; then
    kill -30 "${PID}"

    DEAD=0
    # shellcheck disable=SC2034
    for i in $(seq 540); do
        if ! kill -0 "${PID}" 2>/dev/null; then
            DEAD=1
            break
        fi
        sleep 1
    done

    if [ "${DEAD}" = "0" ]; then
        echo "==> Forcefully killing LXD after 9 minutes wait"
        kill -9 "${PID}"
    fi
fi

## OpenVswitch
if [ -e "${SNAP_COMMON}/openvswitch/run/ovs-vswitchd.pid" ]; then
    PID=$(cat "${SNAP_COMMON}/openvswitch/run/ovs-vswitchd.pid")
    if [ -e "/proc/${PID}" ]; then
        echo "=> Stopping Open vSwitch"
        (
            set -e
            export OVS_LOGDIR="${SNAP_COMMON}/openvswitch/logs/"
            export OVS_RUNDIR="${SNAP_COMMON}/openvswitch/run/"
            export OVS_DBDIR="${SNAP_COMMON}/openvswitch/db/"
            export OVS_SYSCONFDIR="${SNAP_COMMON}/openvswitch/conf/"
            export OVS_PKGDATADIR="${SNAP}/share/openvswitch/"
            export OVS_BINDIR="${SNAP}/bin/"
            export OVS_SBINDIR="${SNAP}/bin/"

            "${SNAP}/share/openvswitch/scripts/ovs-ctl" stop
        )
    fi
fi

## LXCFS
echo "=> Stopping LXCFS"
if [ -e "${SNAP_COMMON}/lxcfs.pid" ]; then
    PID=$(cat "${SNAP_COMMON}/lxcfs.pid")
    /bin/kill "$PID"
    COUNT=0
    while [ "$COUNT" != "30" ]; do
        sleep 1
        COUNT=$((COUNT+1))
        ps "$PID" >/dev/null 2>&1 || break
    done
    ps "$PID" >/dev/null 2>&1 && /bin/kill -9 "$PID"
fi

fusermount -u "${SNAP_COMMON}/var/lib/lxcfs" >/dev/null 2>&1 || true

## Cleanup
rm -f "${SNAP_COMMON}/lxcfs.pid" "${SNAP_COMMON}/lxd.pid"

## Flush our shared namespace from the host
nsenter -t 1 -m umount -l /var/snap/lxd/common/ns 2>/dev/null || true

exit 0
