#!/bin/sh
set -eu

if [ -d /sys/kernel/security/apparmor ] && [ "$(cat /proc/self/attr/current)" != "unconfined" ]; then
    exec aa-exec -p unconfined -- "$0" "$@"
fi

echo "=> Preparing the system"

export LXD_DIR="${SNAP_COMMON}/lxd/"
export LXD_LXC_TEMPLATE_CONFIG="${SNAP}/lxc/config/"
export HOME="/tmp/"

# Setup a functional /etc
echo "==> Preparing a clean copy of /etc"

## Unmount and replace with an empty tmpfs
umount -l /etc >/dev/null 2>&1 || true
mount -t tmpfs tmpfs /etc -o mode=0755

## Pass the bits we need from the host
if [ -d /var/lib/snapd/hostfs/etc/writable ]; then
    mkdir /etc/writable
    mount -o bind,ro /var/lib/snapd/hostfs/etc/writable /etc/writable
fi

for i in hostname hosts passwd group resolv.conf; do
    touch "/etc/${i}"
    mount -o bind,ro /var/lib/snapd/hostfs/etc/${i} /etc/${i}
done

## And the bits we need from the core snap
for i in alternatives apparmor apparmor.d ssl vim; do
    mkdir "/etc/${i}"
    mount -o bind,ro /snap/core/current/etc/${i} /etc/${i}
done

## Setup for LVM
mkdir -p /etc/lvm/
sed \
    -e "s#obtain_device_list_from_udev = 1#obtain_device_list_from_udev = 0#g" \
    -e "s#cache_file_prefix = \"\"#cache_file_prefix = \"lxd\"#g" \
    -e "s#udev_sync = 1#udev_sync = 0#g" \
    -e "s#udev_rules = 1#udev_rules = 0#g" \
    -e "s#use_lvmetad = 1#use_lvmetad = 0#g" \
    -e "/# .*_executable =/s/# //g" \
    -e "s#/usr/sbin/#${SNAP}/bin/#g" \
    "${SNAP}/etc/lvm/lvm.conf" > /etc/lvm/lvm.conf

# Escape resource limits
echo "==> Escaping the systemd cgroups"
for ctr in /sys/fs/cgroup/*; do
    [ -e "${ctr}/tasks" ] || continue
    echo "$$" > "${ctr}/tasks"
done

## prlimits
echo "==> Escaping the systemd process resource limits"
prlimit -p $$ --nofile=1048576:1048576
prlimit -p $$ --nproc=unlimited:unlimited

# Handle sysctls
if [ -e /proc/sys/fs/inotify/max_user_instances ]; then
    if [ "$(cat /proc/sys/fs/inotify/max_user_instances)" -lt "1024" ]; then
        echo "==> Increasing the number of inotify user instances"
        echo 1024 > /proc/sys/fs/inotify/max_user_instances
    fi
fi

if [ -e /proc/sys/kernel/unprivileged_userns_clone ]; then
    echo "==> Enabling unprivileged containers kernel support"
    echo 1 > /proc/sys/kernel/unprivileged_userns_clone
fi

# LXC
## Host specific overrides
mkdir -p "${SNAP_COMMON}/lxc"
touch "${SNAP_COMMON}/lxc/local.conf"
if [ -d /sys/kernel/security/apparmor ] && ! grep -q "\-Ubuntu" /proc/version; then
    echo "==> Detected kernel with partial AppArmor support"
    echo "lxc.aa_allow_incomplete = 1" > "${SNAP_COMMON}/lxc/local.conf"
fi

# LXCFS
if [ -e "${SNAP_COMMON}/var/lib/lxcfs/cgroup" ]; then
    echo "=> Re-using existing LXCFS"
    kill -USR1 "$(cat "${SNAP_COMMON}/lxcfs.pid")" || true
else
    ## Undo any existing mount
    umount -l "${SNAP_COMMON}/var/lib/lxcfs" >/dev/null 2>&1 || true
    fusermount -u "${SNAP_COMMON}/var/lib/lxcfs" >/dev/null 2>&1 || true

    ## Create the mount point
    mkdir -p "${SNAP_COMMON}/var/lib/lxcfs"

    ## Cleanup any leftover
    rm -f "${SNAP_COMMON}/lxcfs.pid"

    ## Start lxcfs
    echo "=> Starting LXCFS"
    ( lxcfs "${SNAP_COMMON}/var/lib/lxcfs" -p "${SNAP_COMMON}/lxcfs.pid" & )
fi

# LXD bridge (for LXD 2.0.x)
if [ -x "${SNAP}/bin/lxd-bridge" ]; then
    echo "=> Starting lxd-bridge"
    mkdir -p "${SNAP_COMMON}/lxd-bridge/run" "${SNAP_COMMON}/lxd-bridge/lib"
    lxd-bridge start || true
fi

# LXD
## Create the main directory
if [ ! -d "${SNAP_COMMON}/lxd" ]; then
    mkdir -p "${SNAP_COMMON}/lxd" "${SNAP_COMMON}/lxd/logs"
    chmod 0711 "${SNAP_COMMON}/lxd"
fi

## Start lxd
CMD="lxd --logfile ${SNAP_COMMON}/lxd/logs/lxd.log"

if getent group lxd >/dev/null 2>&1; then
    CMD="${CMD} --group lxd"
else
    echo "No \"lxd\" group found, only root will be able to use LXD."
fi

echo "=> Starting LXD"
${CMD} &

## Wait for it to be ready
PID=$!
echo $PID > "${SNAP_COMMON}/lxd.pid"
lxd waitready

## Put database in versioned path
if [ ! -L "${SNAP_COMMON}/lxd/lxd.db" ]; then
    mkdir -p "${SNAP_DATA}/lxd/"
    mv "${SNAP_COMMON}/lxd/lxd.db" "${SNAP_DATA}/lxd/lxd.db"
    ln -s "../../current/lxd/lxd.db" "${SNAP_COMMON}/lxd/lxd.db"
fi

## Wait for the daemon to die
echo "=> LXD is ready"
wait $PID
